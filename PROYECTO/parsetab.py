
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODAND BOOL COMMA DIVIDE ELSE EQ EQUALS FALSE FLOAT FLOAT_NUM FOR GE GT ID IF INT INT_NUM LBRACE LE LPAREN LT MAIN MINUS MOD NE OR PLUS PRINT RBRACE RETURN RPAREN SEMI STRING STRING_LITERAL TIMES TRUE VOID WHILEprograma : funcionesfunciones : funcion_or_main funciones\n                 | funcion_or_mainfuncion_or_main : regular_function\n                       | main_function_defregular_function : tipo ID LPAREN parametros RPAREN bloquemain_function_def : VOID MAIN LPAREN parametros RPAREN bloqueparametros : parametro parametros_rest\n                  | emptyparametros_rest : COMMA parametro parametros_rest\n                       | emptyparametro : tipo IDbloque : LBRACE instrucciones RBRACEinstrucciones : instruccion instrucciones\n                     | emptyinstruccion : declaracion SEMI\n                   | asignacion SEMI\n                   | If\n                   | While\n                   | For\n                   | Return\n                   | Printdeclaracion : tipo ID inicializacioninicializacion : EQUALS exp\n                      | emptyasignacion : ID EQUALS expIf : IF LPAREN exp RPAREN bloque ElseElse : ELSE bloque\n            | emptyWhile : WHILE LPAREN exp RPAREN bloqueFor : FOR LPAREN asignacion SEMI exp SEMI asignacion RPAREN bloqueReturn : RETURN exp_opt SEMIexp_opt : exp\n               | emptyPrint : PRINT LPAREN exp RPAREN SEMItipo : INT\n            | FLOAT\n            | BOOL\n            | STRING\n            | VOIDexp : EE : C E_restE_rest : OR C E_rest\n              | emptyC : R C_restC_rest : AND R C_rest\n              | emptyR : T R_restR_rest : EQ T R_rest\n              | NE T R_rest\n              | LT T R_rest\n              | GT T R_rest\n              | LE T R_rest\n              | GE T R_rest\n              | emptyT : F T_restT_rest : PLUS F T_rest\n              | MINUS F T_rest\n              | emptyF : A F_restF_rest : TIMES A F_rest\n              | DIVIDE A F_rest\n              | MOD A F_rest\n              | emptyA : LPAREN exp RPAREN\n         | ID llamada_func\n         | INT_NUM\n         | FLOAT_NUM\n         | STRING_LITERAL\n         | TRUE\n         | FALSEllamada_func : LPAREN lista_args RPAREN\n                    | emptylista_args : exp lista_args_rest\n                  | emptylista_args_rest : COMMA exp lista_args_rest\n                       | emptyempty :'
    
_lr_action_items = {'VOID':([0,3,4,5,15,16,26,29,30,32,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[7,7,-4,-5,21,21,21,-6,21,-7,21,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'INT':([0,3,4,5,15,16,26,29,30,32,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[8,8,-4,-5,8,8,8,-6,8,-7,8,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'FLOAT':([0,3,4,5,15,16,26,29,30,32,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[9,9,-4,-5,9,9,9,-6,9,-7,9,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'BOOL':([0,3,4,5,15,16,26,29,30,32,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[10,10,-4,-5,10,10,10,-6,10,-7,10,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'STRING':([0,3,4,5,15,16,26,29,30,32,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[11,11,-4,-5,11,11,11,-6,11,-7,11,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'$end':([1,2,3,4,5,12,29,32,51,],[0,-1,-3,-4,-5,-2,-6,-7,-13,]),'ID':([6,7,8,9,10,11,17,21,30,34,38,39,40,41,42,43,48,51,53,54,56,57,58,59,69,76,78,84,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,135,136,153,155,156,158,159,161,165,],[13,-40,-36,-37,-38,-39,23,-40,44,44,-18,-19,-20,-21,-22,55,70,-13,-16,-17,70,70,70,44,70,70,70,-32,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-78,-30,70,-35,-27,-29,44,-28,-31,]),'MAIN':([7,],[14,]),'LPAREN':([13,14,45,46,47,48,49,56,57,58,69,70,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[15,16,57,58,59,69,76,69,69,69,69,110,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'RPAREN':([15,16,18,19,20,22,23,25,27,31,50,63,64,65,66,67,68,70,71,72,73,74,75,80,81,82,85,87,88,90,91,98,99,102,103,107,108,109,110,111,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,160,162,163,],[-78,-78,24,-78,-9,28,-12,-8,-11,-78,-10,-41,-78,-78,-78,-78,-78,-78,-67,-68,-69,-70,-71,-26,114,115,-42,-44,-45,-47,-48,-55,-56,-59,-60,-64,130,-66,-78,-73,134,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-65,151,-78,-75,-43,-46,-49,-50,-51,-52,-53,-54,-57,-58,-61,-62,-63,-72,-74,-77,-78,164,-76,]),'COMMA':([19,23,31,63,64,65,66,67,68,70,71,72,73,74,75,85,87,88,90,91,98,99,102,103,107,109,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,138,139,140,141,142,143,144,145,146,147,148,149,150,151,160,],[26,-12,26,-41,-78,-78,-78,-78,-78,-78,-67,-68,-69,-70,-71,-42,-44,-45,-47,-48,-55,-56,-59,-60,-64,-66,-73,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-65,153,-43,-46,-49,-50,-51,-52,-53,-54,-57,-58,-61,-62,-63,-72,153,]),'LBRACE':([24,28,114,115,157,164,],[30,30,30,30,30,30,]),'RBRACE':([30,33,34,35,38,39,40,41,42,51,52,53,54,84,135,136,155,156,158,161,165,],[-78,51,-78,-15,-18,-19,-20,-21,-22,-13,-14,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'IF':([30,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[45,45,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'WHILE':([30,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[46,46,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'FOR':([30,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[47,47,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'RETURN':([30,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[48,48,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'PRINT':([30,34,38,39,40,41,42,51,53,54,84,135,136,155,156,158,161,165,],[49,49,-18,-19,-20,-21,-22,-13,-16,-17,-32,-78,-30,-35,-27,-29,-28,-31,]),'SEMI':([36,37,48,55,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,77,79,80,83,85,87,88,90,91,98,99,102,103,107,109,111,113,117,118,119,120,121,122,123,124,125,126,127,128,129,130,134,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,],[53,54,-78,-78,84,-33,-34,-41,-78,-78,-78,-78,-78,-78,-67,-68,-69,-70,-71,-23,-25,-26,116,-42,-44,-45,-47,-48,-55,-56,-59,-60,-64,-66,-73,-24,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-65,155,159,-43,-46,-49,-50,-51,-52,-53,-54,-57,-58,-61,-62,-63,-72,]),'EQUALS':([44,55,],[56,78,]),'INT_NUM':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'FLOAT_NUM':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'STRING_LITERAL':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'TRUE':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'FALSE':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'ELSE':([51,135,],[-13,157,]),'OR':([64,65,66,67,68,70,71,72,73,74,75,88,90,91,98,99,102,103,107,109,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,139,140,141,142,143,144,145,146,147,148,149,150,151,],[86,-78,-78,-78,-78,-78,-67,-68,-69,-70,-71,-45,-47,-48,-55,-56,-59,-60,-64,-66,-73,86,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-65,-46,-49,-50,-51,-52,-53,-54,-57,-58,-61,-62,-63,-72,]),'AND':([65,66,67,68,70,71,72,73,74,75,91,98,99,102,103,107,109,111,118,119,120,121,122,123,124,125,126,127,128,129,130,140,141,142,143,144,145,146,147,148,149,150,151,],[89,-78,-78,-78,-78,-67,-68,-69,-70,-71,-48,-55,-56,-59,-60,-64,-66,-73,89,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-78,-65,-49,-50,-51,-52,-53,-54,-57,-58,-61,-62,-63,-72,]),'EQ':([66,67,68,70,71,72,73,74,75,99,102,103,107,109,111,119,120,121,122,123,124,125,126,127,128,129,130,146,147,148,149,150,151,],[92,-78,-78,-78,-67,-68,-69,-70,-71,-56,-59,-60,-64,-66,-73,92,92,92,92,92,92,-78,-78,-78,-78,-78,-65,-57,-58,-61,-62,-63,-72,]),'NE':([66,67,68,70,71,72,73,74,75,99,102,103,107,109,111,119,120,121,122,123,124,125,126,127,128,129,130,146,147,148,149,150,151,],[93,-78,-78,-78,-67,-68,-69,-70,-71,-56,-59,-60,-64,-66,-73,93,93,93,93,93,93,-78,-78,-78,-78,-78,-65,-57,-58,-61,-62,-63,-72,]),'LT':([66,67,68,70,71,72,73,74,75,99,102,103,107,109,111,119,120,121,122,123,124,125,126,127,128,129,130,146,147,148,149,150,151,],[94,-78,-78,-78,-67,-68,-69,-70,-71,-56,-59,-60,-64,-66,-73,94,94,94,94,94,94,-78,-78,-78,-78,-78,-65,-57,-58,-61,-62,-63,-72,]),'GT':([66,67,68,70,71,72,73,74,75,99,102,103,107,109,111,119,120,121,122,123,124,125,126,127,128,129,130,146,147,148,149,150,151,],[95,-78,-78,-78,-67,-68,-69,-70,-71,-56,-59,-60,-64,-66,-73,95,95,95,95,95,95,-78,-78,-78,-78,-78,-65,-57,-58,-61,-62,-63,-72,]),'LE':([66,67,68,70,71,72,73,74,75,99,102,103,107,109,111,119,120,121,122,123,124,125,126,127,128,129,130,146,147,148,149,150,151,],[96,-78,-78,-78,-67,-68,-69,-70,-71,-56,-59,-60,-64,-66,-73,96,96,96,96,96,96,-78,-78,-78,-78,-78,-65,-57,-58,-61,-62,-63,-72,]),'GE':([66,67,68,70,71,72,73,74,75,99,102,103,107,109,111,119,120,121,122,123,124,125,126,127,128,129,130,146,147,148,149,150,151,],[97,-78,-78,-78,-67,-68,-69,-70,-71,-56,-59,-60,-64,-66,-73,97,97,97,97,97,97,-78,-78,-78,-78,-78,-65,-57,-58,-61,-62,-63,-72,]),'PLUS':([67,68,70,71,72,73,74,75,103,107,109,111,125,126,127,128,129,130,148,149,150,151,],[100,-78,-78,-67,-68,-69,-70,-71,-60,-64,-66,-73,100,100,-78,-78,-78,-65,-61,-62,-63,-72,]),'MINUS':([67,68,70,71,72,73,74,75,103,107,109,111,125,126,127,128,129,130,148,149,150,151,],[101,-78,-78,-67,-68,-69,-70,-71,-60,-64,-66,-73,101,101,-78,-78,-78,-65,-61,-62,-63,-72,]),'TIMES':([68,70,71,72,73,74,75,109,111,127,128,129,130,151,],[104,-78,-67,-68,-69,-70,-71,-66,-73,104,104,104,-65,-72,]),'DIVIDE':([68,70,71,72,73,74,75,109,111,127,128,129,130,151,],[105,-78,-67,-68,-69,-70,-71,-66,-73,105,105,105,-65,-72,]),'MOD':([68,70,71,72,73,74,75,109,111,127,128,129,130,151,],[106,-78,-67,-68,-69,-70,-71,-66,-73,106,106,106,-65,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'funciones':([0,3,],[2,12,]),'funcion_or_main':([0,3,],[3,3,]),'regular_function':([0,3,],[4,4,]),'main_function_def':([0,3,],[5,5,]),'tipo':([0,3,15,16,26,30,34,],[6,6,17,17,17,43,43,]),'parametros':([15,16,],[18,22,]),'parametro':([15,16,26,],[19,19,31,]),'empty':([15,16,19,30,31,34,48,55,64,65,66,67,68,70,110,117,118,119,120,121,122,123,124,125,126,127,128,129,132,135,160,],[20,20,27,35,27,35,62,79,87,90,98,102,107,111,133,87,90,98,98,98,98,98,98,102,102,107,107,107,154,158,154,]),'parametros_rest':([19,31,],[25,50,]),'bloque':([24,28,114,115,157,164,],[29,32,135,136,161,165,]),'instrucciones':([30,34,],[33,52,]),'instruccion':([30,34,],[34,34,]),'declaracion':([30,34,],[36,36,]),'asignacion':([30,34,59,159,],[37,37,83,162,]),'If':([30,34,],[38,38,]),'While':([30,34,],[39,39,]),'For':([30,34,],[40,40,]),'Return':([30,34,],[41,41,]),'Print':([30,34,],[42,42,]),'exp_opt':([48,],[60,]),'exp':([48,56,57,58,69,76,78,110,116,153,],[61,80,81,82,108,112,113,132,137,160,]),'E':([48,56,57,58,69,76,78,110,116,153,],[63,63,63,63,63,63,63,63,63,63,]),'C':([48,56,57,58,69,76,78,86,110,116,153,],[64,64,64,64,64,64,64,117,64,64,64,]),'R':([48,56,57,58,69,76,78,86,89,110,116,153,],[65,65,65,65,65,65,65,65,118,65,65,65,]),'T':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,110,116,153,],[66,66,66,66,66,66,66,66,66,119,120,121,122,123,124,66,66,66,]),'F':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,110,116,153,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,125,126,67,67,67,]),'A':([48,56,57,58,69,76,78,86,89,92,93,94,95,96,97,100,101,104,105,106,110,116,153,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,127,128,129,68,68,68,]),'inicializacion':([55,],[77,]),'E_rest':([64,117,],[85,138,]),'C_rest':([65,118,],[88,139,]),'R_rest':([66,119,120,121,122,123,124,],[91,140,141,142,143,144,145,]),'T_rest':([67,125,126,],[99,146,147,]),'F_rest':([68,127,128,129,],[103,148,149,150,]),'llamada_func':([70,],[109,]),'lista_args':([110,],[131,]),'lista_args_rest':([132,160,],[152,163,]),'Else':([135,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> funciones','programa',1,'p_programa','Parser.py',15),
  ('funciones -> funcion_or_main funciones','funciones',2,'p_funciones','Parser.py',20),
  ('funciones -> funcion_or_main','funciones',1,'p_funciones','Parser.py',21),
  ('funcion_or_main -> regular_function','funcion_or_main',1,'p_funcion_or_main','Parser.py',31),
  ('funcion_or_main -> main_function_def','funcion_or_main',1,'p_funcion_or_main','Parser.py',32),
  ('regular_function -> tipo ID LPAREN parametros RPAREN bloque','regular_function',6,'p_regular_function','Parser.py',37),
  ('main_function_def -> VOID MAIN LPAREN parametros RPAREN bloque','main_function_def',6,'p_main_function_def','Parser.py',46),
  ('parametros -> parametro parametros_rest','parametros',2,'p_parametros','Parser.py',57),
  ('parametros -> empty','parametros',1,'p_parametros','Parser.py',58),
  ('parametros_rest -> COMMA parametro parametros_rest','parametros_rest',3,'p_parametros_rest','Parser.py',65),
  ('parametros_rest -> empty','parametros_rest',1,'p_parametros_rest','Parser.py',66),
  ('parametro -> tipo ID','parametro',2,'p_parametro','Parser.py',73),
  ('bloque -> LBRACE instrucciones RBRACE','bloque',3,'p_bloque','Parser.py',77),
  ('instrucciones -> instruccion instrucciones','instrucciones',2,'p_instrucciones','Parser.py',81),
  ('instrucciones -> empty','instrucciones',1,'p_instrucciones','Parser.py',82),
  ('instruccion -> declaracion SEMI','instruccion',2,'p_instruccion','Parser.py',89),
  ('instruccion -> asignacion SEMI','instruccion',2,'p_instruccion','Parser.py',90),
  ('instruccion -> If','instruccion',1,'p_instruccion','Parser.py',91),
  ('instruccion -> While','instruccion',1,'p_instruccion','Parser.py',92),
  ('instruccion -> For','instruccion',1,'p_instruccion','Parser.py',93),
  ('instruccion -> Return','instruccion',1,'p_instruccion','Parser.py',94),
  ('instruccion -> Print','instruccion',1,'p_instruccion','Parser.py',95),
  ('declaracion -> tipo ID inicializacion','declaracion',3,'p_declaracion','Parser.py',99),
  ('inicializacion -> EQUALS exp','inicializacion',2,'p_inicializacion','Parser.py',103),
  ('inicializacion -> empty','inicializacion',1,'p_inicializacion','Parser.py',104),
  ('asignacion -> ID EQUALS exp','asignacion',3,'p_asignacion','Parser.py',111),
  ('If -> IF LPAREN exp RPAREN bloque Else','If',6,'p_If','Parser.py',115),
  ('Else -> ELSE bloque','Else',2,'p_Else','Parser.py',119),
  ('Else -> empty','Else',1,'p_Else','Parser.py',120),
  ('While -> WHILE LPAREN exp RPAREN bloque','While',5,'p_While','Parser.py',127),
  ('For -> FOR LPAREN asignacion SEMI exp SEMI asignacion RPAREN bloque','For',9,'p_For','Parser.py',131),
  ('Return -> RETURN exp_opt SEMI','Return',3,'p_Return','Parser.py',135),
  ('exp_opt -> exp','exp_opt',1,'p_exp_opt','Parser.py',139),
  ('exp_opt -> empty','exp_opt',1,'p_exp_opt','Parser.py',140),
  ('Print -> PRINT LPAREN exp RPAREN SEMI','Print',5,'p_Print','Parser.py',144),
  ('tipo -> INT','tipo',1,'p_tipo','Parser.py',148),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Parser.py',149),
  ('tipo -> BOOL','tipo',1,'p_tipo','Parser.py',150),
  ('tipo -> STRING','tipo',1,'p_tipo','Parser.py',151),
  ('tipo -> VOID','tipo',1,'p_tipo','Parser.py',152),
  ('exp -> E','exp',1,'p_exp','Parser.py',156),
  ('E -> C E_rest','E',2,'p_E','Parser.py',160),
  ('E_rest -> OR C E_rest','E_rest',3,'p_E_rest','Parser.py',167),
  ('E_rest -> empty','E_rest',1,'p_E_rest','Parser.py',168),
  ('C -> R C_rest','C',2,'p_C','Parser.py',178),
  ('C_rest -> AND R C_rest','C_rest',3,'p_C_rest','Parser.py',185),
  ('C_rest -> empty','C_rest',1,'p_C_rest','Parser.py',186),
  ('R -> T R_rest','R',2,'p_R','Parser.py',196),
  ('R_rest -> EQ T R_rest','R_rest',3,'p_R_rest','Parser.py',203),
  ('R_rest -> NE T R_rest','R_rest',3,'p_R_rest','Parser.py',204),
  ('R_rest -> LT T R_rest','R_rest',3,'p_R_rest','Parser.py',205),
  ('R_rest -> GT T R_rest','R_rest',3,'p_R_rest','Parser.py',206),
  ('R_rest -> LE T R_rest','R_rest',3,'p_R_rest','Parser.py',207),
  ('R_rest -> GE T R_rest','R_rest',3,'p_R_rest','Parser.py',208),
  ('R_rest -> empty','R_rest',1,'p_R_rest','Parser.py',209),
  ('T -> F T_rest','T',2,'p_T','Parser.py',219),
  ('T_rest -> PLUS F T_rest','T_rest',3,'p_T_rest','Parser.py',226),
  ('T_rest -> MINUS F T_rest','T_rest',3,'p_T_rest','Parser.py',227),
  ('T_rest -> empty','T_rest',1,'p_T_rest','Parser.py',228),
  ('F -> A F_rest','F',2,'p_F','Parser.py',238),
  ('F_rest -> TIMES A F_rest','F_rest',3,'p_F_rest','Parser.py',245),
  ('F_rest -> DIVIDE A F_rest','F_rest',3,'p_F_rest','Parser.py',246),
  ('F_rest -> MOD A F_rest','F_rest',3,'p_F_rest','Parser.py',247),
  ('F_rest -> empty','F_rest',1,'p_F_rest','Parser.py',248),
  ('A -> LPAREN exp RPAREN','A',3,'p_A','Parser.py',258),
  ('A -> ID llamada_func','A',2,'p_A','Parser.py',259),
  ('A -> INT_NUM','A',1,'p_A','Parser.py',260),
  ('A -> FLOAT_NUM','A',1,'p_A','Parser.py',261),
  ('A -> STRING_LITERAL','A',1,'p_A','Parser.py',262),
  ('A -> TRUE','A',1,'p_A','Parser.py',263),
  ('A -> FALSE','A',1,'p_A','Parser.py',264),
  ('llamada_func -> LPAREN lista_args RPAREN','llamada_func',3,'p_llamada_func','Parser.py',278),
  ('llamada_func -> empty','llamada_func',1,'p_llamada_func','Parser.py',279),
  ('lista_args -> exp lista_args_rest','lista_args',2,'p_lista_args','Parser.py',286),
  ('lista_args -> empty','lista_args',1,'p_lista_args','Parser.py',287),
  ('lista_args_rest -> COMMA exp lista_args_rest','lista_args_rest',3,'p_lista_args_rest','Parser.py',294),
  ('lista_args_rest -> empty','lista_args_rest',1,'p_lista_args_rest','Parser.py',295),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',302),
]
